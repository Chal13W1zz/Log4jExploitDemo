import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import static spark.Spark.*;
public class App {
    static final Logger logger = LogManager.getLogger(App.class.getName());

    public static void main(String[] args) {
        port(9090);
        get("/*",(request,response)->{
            String userAgent = request.userAgent();
            /* JDK versions greater than 6u211, 7u201, 8u191, and 11.0.1 are not affected by the LDAP attack vector(CVE-2021-44228).
            com.sun.jndi.ldap.object.trustURLCodebase is set to false, meaning JNDI cannot load a remote codebase using LDAP.
            In Log4j releases >=2.10,
            this behavior can be mitigated by setting system property log4j2.formatMsgNoLookups to true
            or by removing the JndiLookup class from the classpath (e.g. zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class).
            Java 8u121 protects against RCE by defaulting com.sun.jndi.rmi.object.trustURLCodebase and com.sun.jndi.cosnaming.object.trustURLCodebase to false.
            */
            System.setProperty("com.sun.jndi.ldap.object.trustURLCodebase", "true"); //remove the rce protection
            System.out.println("Logging user agent:"+userAgent);
            logger.error(userAgent);
            return "200 OK: UserAgent : "+userAgent;
        });
    }
}
